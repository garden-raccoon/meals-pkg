// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: meals-pkg-service.proto

package meals_pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MealsService_CreateMeals_FullMethodName       = "/models.MealsService/CreateMeals"
	MealsService_GetMeals_FullMethodName          = "/models.MealsService/GetMeals"
	MealsService_MealByMealUuid_FullMethodName    = "/models.MealsService/MealByMealUuid"
	MealsService_UpdateMeal_FullMethodName        = "/models.MealsService/UpdateMeal"
	MealsService_DeleteMeal_FullMethodName        = "/models.MealsService/DeleteMeal"
	MealsService_DeleteSettingsKey_FullMethodName = "/models.MealsService/DeleteSettingsKey"
)

// MealsServiceClient is the client API for MealsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OrderService is
type MealsServiceClient interface {
	CreateMeals(ctx context.Context, in *Meals, opts ...grpc.CallOption) (*MealsEmpty, error)
	GetMeals(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Meals, error)
	MealByMealUuid(ctx context.Context, in *MealGetReq, opts ...grpc.CallOption) (*Meal, error)
	UpdateMeal(ctx context.Context, in *UpdateMealReq, opts ...grpc.CallOption) (*MealsEmpty, error)
	DeleteMeal(ctx context.Context, in *MealDeleteReq, opts ...grpc.CallOption) (*MealsEmpty, error)
	DeleteSettingsKey(ctx context.Context, in *MealDeleteSettingKeyReq, opts ...grpc.CallOption) (*MealsEmpty, error)
}

type mealsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMealsServiceClient(cc grpc.ClientConnInterface) MealsServiceClient {
	return &mealsServiceClient{cc}
}

func (c *mealsServiceClient) CreateMeals(ctx context.Context, in *Meals, opts ...grpc.CallOption) (*MealsEmpty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MealsEmpty)
	err := c.cc.Invoke(ctx, MealsService_CreateMeals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealsServiceClient) GetMeals(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Meals, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Meals)
	err := c.cc.Invoke(ctx, MealsService_GetMeals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealsServiceClient) MealByMealUuid(ctx context.Context, in *MealGetReq, opts ...grpc.CallOption) (*Meal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Meal)
	err := c.cc.Invoke(ctx, MealsService_MealByMealUuid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealsServiceClient) UpdateMeal(ctx context.Context, in *UpdateMealReq, opts ...grpc.CallOption) (*MealsEmpty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MealsEmpty)
	err := c.cc.Invoke(ctx, MealsService_UpdateMeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealsServiceClient) DeleteMeal(ctx context.Context, in *MealDeleteReq, opts ...grpc.CallOption) (*MealsEmpty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MealsEmpty)
	err := c.cc.Invoke(ctx, MealsService_DeleteMeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealsServiceClient) DeleteSettingsKey(ctx context.Context, in *MealDeleteSettingKeyReq, opts ...grpc.CallOption) (*MealsEmpty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MealsEmpty)
	err := c.cc.Invoke(ctx, MealsService_DeleteSettingsKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MealsServiceServer is the server API for MealsService service.
// All implementations must embed UnimplementedMealsServiceServer
// for forward compatibility.
//
// OrderService is
type MealsServiceServer interface {
	CreateMeals(context.Context, *Meals) (*MealsEmpty, error)
	GetMeals(context.Context, *Pagination) (*Meals, error)
	MealByMealUuid(context.Context, *MealGetReq) (*Meal, error)
	UpdateMeal(context.Context, *UpdateMealReq) (*MealsEmpty, error)
	DeleteMeal(context.Context, *MealDeleteReq) (*MealsEmpty, error)
	DeleteSettingsKey(context.Context, *MealDeleteSettingKeyReq) (*MealsEmpty, error)
	mustEmbedUnimplementedMealsServiceServer()
}

// UnimplementedMealsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMealsServiceServer struct{}

func (UnimplementedMealsServiceServer) CreateMeals(context.Context, *Meals) (*MealsEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeals not implemented")
}
func (UnimplementedMealsServiceServer) GetMeals(context.Context, *Pagination) (*Meals, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeals not implemented")
}
func (UnimplementedMealsServiceServer) MealByMealUuid(context.Context, *MealGetReq) (*Meal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MealByMealUuid not implemented")
}
func (UnimplementedMealsServiceServer) UpdateMeal(context.Context, *UpdateMealReq) (*MealsEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMeal not implemented")
}
func (UnimplementedMealsServiceServer) DeleteMeal(context.Context, *MealDeleteReq) (*MealsEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMeal not implemented")
}
func (UnimplementedMealsServiceServer) DeleteSettingsKey(context.Context, *MealDeleteSettingKeyReq) (*MealsEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSettingsKey not implemented")
}
func (UnimplementedMealsServiceServer) mustEmbedUnimplementedMealsServiceServer() {}
func (UnimplementedMealsServiceServer) testEmbeddedByValue()                      {}

// UnsafeMealsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MealsServiceServer will
// result in compilation errors.
type UnsafeMealsServiceServer interface {
	mustEmbedUnimplementedMealsServiceServer()
}

func RegisterMealsServiceServer(s grpc.ServiceRegistrar, srv MealsServiceServer) {
	// If the following call pancis, it indicates UnimplementedMealsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MealsService_ServiceDesc, srv)
}

func _MealsService_CreateMeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Meals)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealsServiceServer).CreateMeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealsService_CreateMeals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealsServiceServer).CreateMeals(ctx, req.(*Meals))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealsService_GetMeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealsServiceServer).GetMeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealsService_GetMeals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealsServiceServer).GetMeals(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealsService_MealByMealUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MealGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealsServiceServer).MealByMealUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealsService_MealByMealUuid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealsServiceServer).MealByMealUuid(ctx, req.(*MealGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealsService_UpdateMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMealReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealsServiceServer).UpdateMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealsService_UpdateMeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealsServiceServer).UpdateMeal(ctx, req.(*UpdateMealReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealsService_DeleteMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MealDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealsServiceServer).DeleteMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealsService_DeleteMeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealsServiceServer).DeleteMeal(ctx, req.(*MealDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealsService_DeleteSettingsKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MealDeleteSettingKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealsServiceServer).DeleteSettingsKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealsService_DeleteSettingsKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealsServiceServer).DeleteSettingsKey(ctx, req.(*MealDeleteSettingKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MealsService_ServiceDesc is the grpc.ServiceDesc for MealsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MealsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "models.MealsService",
	HandlerType: (*MealsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMeals",
			Handler:    _MealsService_CreateMeals_Handler,
		},
		{
			MethodName: "GetMeals",
			Handler:    _MealsService_GetMeals_Handler,
		},
		{
			MethodName: "MealByMealUuid",
			Handler:    _MealsService_MealByMealUuid_Handler,
		},
		{
			MethodName: "UpdateMeal",
			Handler:    _MealsService_UpdateMeal_Handler,
		},
		{
			MethodName: "DeleteMeal",
			Handler:    _MealsService_DeleteMeal_Handler,
		},
		{
			MethodName: "DeleteSettingsKey",
			Handler:    _MealsService_DeleteSettingsKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meals-pkg-service.proto",
}
